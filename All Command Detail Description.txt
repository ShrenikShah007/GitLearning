==> Why GIT?
    Git is used for version control and also to track file version based on changes. It also helps developer to work multiple person on same module without conflicting each others code.We can also rollback to previous version. 
    (Files tracking is a responsibility of Developers)

==> Features of GIT
    It will strore all files in snapshot format not differecnce inside .git folder. 
    (All files version control will be handled using .git folder)
    Almost every operations aare local until it saves and commited to remote repository.
    Git has integrity (We can check file changes using checksum)

==> Git Three Stage Structure
    1) Local working environment
    2) Staging (Which files ready for commits)
    3) Git Directory (Repository Actually commited files)

==> Git Files status lifecycle
    1) Untracked (it will create untracked when git init execute)
    2) Unmodified (git add --a)
    3) Modified (git add .)
    4) Staged (git Commit -m "Message")

==> GitIgnore file Importance
   The command "touch.gitignore" allows us to create a single file. We can include any files or folders in the git ignoreÂ file that we do not want to be tracked.

==> Command:: pwd
    Present Working Directory

==> Command::  git config --global user.name
    Set username & email using above command

==> Command::  git status
    status of current branch or repository

==> Command::  git add --a   
    It will add all files and folder to staging area or ready for commits

==> Command::  git log   
    It will list down all the commited message with user info and commit message.

==> Command::  rm -rf .git   
    It will remove .git folder repository.

==> Command::  git Clone SSh_url   
    It will pull all the data of remote repository to local machine using above command.

==> Command::  git diff   
    It will compare content between staging directory and working directory.

==> Command::  git diff --staged  
    It will compare content between last commit with current staging.

==> Command::  git pull  
    This command will used to retrieve data from remote repository to local machine.

==> Command::  git push  
    This command will used to insert data from local machine to remote repository.

==> Command::  git commit -a -m "Meesage"  
    It will skip staging file and execute commit but not commit for untracked file.

==> Command::  git rm "file"  
    It will remove file and also staged.

==> Command::  git rm --cached "File_name"  
    It will remove file from tracking.

==> Command::  git log -p  
    It will list all commits with message and changes in detail.

==> Command::  git log --pretty=oneline 
    It will list all commits with message not other details.

==> Command::  git log --pretty=full 
    It will list all commits with all details such as author, commentor.

==> Command::  git log --pretty=sort 
    It will list all commits in sort form with only author.

==> Command::  git log --since=2.days 
    It will list all commits executed in last two days.

==> Command::  git log -p -"numbers" 
    This command will useful to retrieve numbers of commited to view.

==> Command::  git restore --staged "file_name" 
    This will unstage previously staged file using git add command.

==> Command::  git checkout -f 
    This will replace all modified file with previous commit.

==> Command::  git checkout -- "file_name"
    This will replace specific modified file with previous commit.

==> Command::  git config --global alias.ci commit
    Alias command used to write default command name with specific name using above syntax.

==> Command::  git checkout -b "branch_name"
    This command will create new branch and change current branch with newly created branch.

==> Command::  git checkout "branch_name"
    This command will from current branch to specified branch using above repository.

==> Command::  git mrege "branch_name"
    Before executing above command, We need to move into master branch and all changes needs to commited before merge. It will merge your 
    current branch with Master/main branch.

==> Command::  git branch -v
    This command will get last commit details such has commit message and hash.